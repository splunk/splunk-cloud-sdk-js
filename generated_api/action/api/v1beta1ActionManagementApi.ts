// /**
//  * Action Service
//  * A service that receives incoming notifications and uses pre-defined templates (action objects) to turn those notifications into meaningful actions.
//  *
//  * OpenAPI spec version: v1beta2
//  *
//  *
//  * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
//  * https://openapi-generator.tech
//  * Do not edit the class manually.
//  */

// import Promise = require('bluebird');
// import http = require('http');
// import localVarRequest = require('request');

// /* tslint:disable:no-unused-locals */
// import { ActionResult } from '../model/actionResult';
// import { DeprecatedAction } from '../model/deprecatedAction';
// import { DeprecatedActionMutable } from '../model/deprecatedActionMutable';

// import { ApiKeyAuth, Authentication, HttpBasicAuth, OAuth, ObjectSerializer, VoidAuth } from '../model/models';

// const defaultBasePath = 'https://api.splunkbeta.com';

// // ===============================================
// // This file is autogenerated - Please do not edit
// // ===============================================

// export enum V1beta1ActionManagementApiApiKeys {
// }

// export class V1beta1ActionManagementApi {
//     protected _basePath = defaultBasePath;
//     protected defaultHeaders : any = {};
//     protected _useQuerystring : boolean = false;

//     protected authentications = {
//         default: new VoidAuth() as Authentication,
//     };

//     constructor(basePath?: string);
//     constructor(basePathOrUsername: string, password?: string, basePath?: string) {
//         if (password) {
//             if (basePath) {
//                 this.basePath = basePath;
//             }
//         } else {
//             if (basePathOrUsername) {
//                 this.basePath = basePathOrUsername;
//             }
//         }
//     }

//     set useQuerystring(value: boolean) {
//         this._useQuerystring = value;
//     }

//     set basePath(basePath: string) {
//         this._basePath = basePath;
//     }

//     get basePath() {
//         return this._basePath;
//     }

//     public setDefaultAuthentication(auth: Authentication) {
//         this.authentications.default = auth;
//     }

//     public setApiKey(key: V1beta1ActionManagementApiApiKeys, value: string) {
//         (this.authentications as any)[V1beta1ActionManagementApiApiKeys[key]].apiKey = value;
//     }

//     /**
//      *
//      * @summary Create an action object template.
//      * @param authorization Access token provided by the user (obtained from a known identity provider).
//      * @param tenant Tenant name/identifier
//      * @param deprecatedAction The action object template to create.
//      */
//     public createAction (authorization: string, tenant: string, deprecatedAction: DeprecatedAction, options: {headers: {[name: string]: string}} = { headers: {} }) : Promise<{ response: http.ClientResponse; body: DeprecatedAction;  }> {
//         const localVarPath = this.basePath + '/{tenant}/action/v1beta1/actions'
//             .replace('{' + 'tenant' + '}', encodeURIComponent(String(tenant)));
//         const localVarQueryParameters: any = {};
//         const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
//         const localVarFormParams: any = {};

//         // verify required parameter 'authorization' is not null or undefined
//         if (authorization === null || authorization === undefined) {
//             throw new Error('Required parameter authorization was null or undefined when calling createAction.');
//         }

//         // verify required parameter 'tenant' is not null or undefined
//         if (tenant === null || tenant === undefined) {
//             throw new Error('Required parameter tenant was null or undefined when calling createAction.');
//         }

//         // verify required parameter 'deprecatedAction' is not null or undefined
//         if (deprecatedAction === null || deprecatedAction === undefined) {
//             throw new Error('Required parameter deprecatedAction was null or undefined when calling createAction.');
//         }

//         localVarHeaderParams.Authorization = ObjectSerializer.serialize(authorization, 'string');
//         (Object as any).assign(localVarHeaderParams, options.headers);

//         const localVarUseFormData = false;

//         const localVarRequestOptions: localVarRequest.Options = {
//             method: 'POST',
//             qs: localVarQueryParameters,
//             headers: localVarHeaderParams,
//             uri: localVarPath,
//             useQuerystring: this._useQuerystring,
//             json: true,
//             body: ObjectSerializer.serialize(deprecatedAction, 'DeprecatedAction')
//         };

//         this.authentications.default.applyToRequest(localVarRequestOptions);

//         if (Object.keys(localVarFormParams).length) {
//             if (localVarUseFormData) {
//                 (localVarRequestOptions as any).formData = localVarFormParams;
//             } else {
//                 localVarRequestOptions.form = localVarFormParams;
//             }
//         }
//         return new Promise<{ response: http.ClientResponse; body: DeprecatedAction;  }>((resolve, reject) => {
//             localVarRequest(localVarRequestOptions, (error, response, body) => {
//                 if (error) {
//                     reject(error);
//                 } else {
//                     body = ObjectSerializer.deserialize(body, 'DeprecatedAction');
//                     if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
//                         resolve({ response, body });
//                     } else {
//                         reject({ response, body });
//                     }
//                 }
//             });
//         });
//     }
//     /**
//      *
//      * @summary Delete an action object template.
//      * @param actionName The name of the action object to delete.
//      * @param authorization Access token provided by the user (obtained from a known identity provider).
//      * @param tenant Tenant name/identifier
//      */
//     public deleteAction (actionName: string, authorization: string, tenant: string, options: {headers: {[name: string]: string}} = { headers: {} }) : Promise<{ response: http.ClientResponse; body?: any;  }> {
//         const localVarPath = this.basePath + '/{tenant}/action/v1beta1/actions/{action_name}'
//             .replace('{' + 'action_name' + '}', encodeURIComponent(String(actionName)))
//             .replace('{' + 'tenant' + '}', encodeURIComponent(String(tenant)));
//         const localVarQueryParameters: any = {};
//         const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
//         const localVarFormParams: any = {};

//         // verify required parameter 'actionName' is not null or undefined
//         if (actionName === null || actionName === undefined) {
//             throw new Error('Required parameter actionName was null or undefined when calling deleteAction.');
//         }

//         // verify required parameter 'authorization' is not null or undefined
//         if (authorization === null || authorization === undefined) {
//             throw new Error('Required parameter authorization was null or undefined when calling deleteAction.');
//         }

//         // verify required parameter 'tenant' is not null or undefined
//         if (tenant === null || tenant === undefined) {
//             throw new Error('Required parameter tenant was null or undefined when calling deleteAction.');
//         }

//         localVarHeaderParams.Authorization = ObjectSerializer.serialize(authorization, 'string');
//         (Object as any).assign(localVarHeaderParams, options.headers);

//         const localVarUseFormData = false;

//         const localVarRequestOptions: localVarRequest.Options = {
//             method: 'DELETE',
//             qs: localVarQueryParameters,
//             headers: localVarHeaderParams,
//             uri: localVarPath,
//             useQuerystring: this._useQuerystring,
//             json: true,
//         };

//         this.authentications.default.applyToRequest(localVarRequestOptions);

//         if (Object.keys(localVarFormParams).length) {
//             if (localVarUseFormData) {
//                 (localVarRequestOptions as any).formData = localVarFormParams;
//             } else {
//                 localVarRequestOptions.form = localVarFormParams;
//             }
//         }
//         return new Promise<{ response: http.ClientResponse; body?: any;  }>((resolve, reject) => {
//             localVarRequest(localVarRequestOptions, (error, response, body) => {
//                 if (error) {
//                     reject(error);
//                 } else {
//                     if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
//                         resolve({ response, body });
//                     } else {
//                         reject({ response, body });
//                     }
//                 }
//             });
//         });
//     }
//     /**
//      *
//      * @summary Return a specific action object.
//      * @param actionName The name of the action object to retrieve.
//      * @param authorization Access token provided by the user (obtained from a known identity provider).
//      * @param tenant Tenant name/identifier
//      */
//     public getAction (actionName: string, authorization: string, tenant: string, options: {headers: {[name: string]: string}} = { headers: {} }) : Promise<{ response: http.ClientResponse; body: DeprecatedAction;  }> {
//         const localVarPath = this.basePath + '/{tenant}/action/v1beta1/actions/{action_name}'
//             .replace('{' + 'action_name' + '}', encodeURIComponent(String(actionName)))
//             .replace('{' + 'tenant' + '}', encodeURIComponent(String(tenant)));
//         const localVarQueryParameters: any = {};
//         const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
//         const localVarFormParams: any = {};

//         // verify required parameter 'actionName' is not null or undefined
//         if (actionName === null || actionName === undefined) {
//             throw new Error('Required parameter actionName was null or undefined when calling getAction.');
//         }

//         // verify required parameter 'authorization' is not null or undefined
//         if (authorization === null || authorization === undefined) {
//             throw new Error('Required parameter authorization was null or undefined when calling getAction.');
//         }

//         // verify required parameter 'tenant' is not null or undefined
//         if (tenant === null || tenant === undefined) {
//             throw new Error('Required parameter tenant was null or undefined when calling getAction.');
//         }

//         localVarHeaderParams.Authorization = ObjectSerializer.serialize(authorization, 'string');
//         (Object as any).assign(localVarHeaderParams, options.headers);

//         const localVarUseFormData = false;

//         const localVarRequestOptions: localVarRequest.Options = {
//             method: 'GET',
//             qs: localVarQueryParameters,
//             headers: localVarHeaderParams,
//             uri: localVarPath,
//             useQuerystring: this._useQuerystring,
//             json: true,
//         };

//         this.authentications.default.applyToRequest(localVarRequestOptions);

//         if (Object.keys(localVarFormParams).length) {
//             if (localVarUseFormData) {
//                 (localVarRequestOptions as any).formData = localVarFormParams;
//             } else {
//                 localVarRequestOptions.form = localVarFormParams;
//             }
//         }
//         return new Promise<{ response: http.ClientResponse; body: DeprecatedAction;  }>((resolve, reject) => {
//             localVarRequest(localVarRequestOptions, (error, response, body) => {
//                 if (error) {
//                     reject(error);
//                 } else {
//                     body = ObjectSerializer.deserialize(body, 'DeprecatedAction');
//                     if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
//                         resolve({ response, body });
//                     } else {
//                         reject({ response, body });
//                     }
//                 }
//             });
//         });
//     }
//     /**
//      *
//      * @summary Get triggered action's execution status.
//      * @param actionName Name of the triggered action.
//      * @param statusId ID for the action status.
//      * @param authorization Access token provided by the user (obtained from a known identity provider).
//      * @param tenant Tenant name/identifier
//      */
//     public getActionStatus (actionName: string, statusId: string, authorization: string, tenant: string, options: {headers: {[name: string]: string}} = { headers: {} }) : Promise<{ response: http.ClientResponse; body: ActionResult;  }> {
//         const localVarPath = this.basePath + '/{tenant}/action/v1beta1/actions/{action_name}/status/{status_id}'
//             .replace('{' + 'action_name' + '}', encodeURIComponent(String(actionName)))
//             .replace('{' + 'status_id' + '}', encodeURIComponent(String(statusId)))
//             .replace('{' + 'tenant' + '}', encodeURIComponent(String(tenant)));
//         const localVarQueryParameters: any = {};
//         const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
//         const localVarFormParams: any = {};

//         // verify required parameter 'actionName' is not null or undefined
//         if (actionName === null || actionName === undefined) {
//             throw new Error('Required parameter actionName was null or undefined when calling getActionStatus.');
//         }

//         // verify required parameter 'statusId' is not null or undefined
//         if (statusId === null || statusId === undefined) {
//             throw new Error('Required parameter statusId was null or undefined when calling getActionStatus.');
//         }

//         // verify required parameter 'authorization' is not null or undefined
//         if (authorization === null || authorization === undefined) {
//             throw new Error('Required parameter authorization was null or undefined when calling getActionStatus.');
//         }

//         // verify required parameter 'tenant' is not null or undefined
//         if (tenant === null || tenant === undefined) {
//             throw new Error('Required parameter tenant was null or undefined when calling getActionStatus.');
//         }

//         localVarHeaderParams.Authorization = ObjectSerializer.serialize(authorization, 'string');
//         (Object as any).assign(localVarHeaderParams, options.headers);

//         const localVarUseFormData = false;

//         const localVarRequestOptions: localVarRequest.Options = {
//             method: 'GET',
//             qs: localVarQueryParameters,
//             headers: localVarHeaderParams,
//             uri: localVarPath,
//             useQuerystring: this._useQuerystring,
//             json: true,
//         };

//         this.authentications.default.applyToRequest(localVarRequestOptions);

//         if (Object.keys(localVarFormParams).length) {
//             if (localVarUseFormData) {
//                 (localVarRequestOptions as any).formData = localVarFormParams;
//             } else {
//                 localVarRequestOptions.form = localVarFormParams;
//             }
//         }
//         return new Promise<{ response: http.ClientResponse; body: ActionResult;  }>((resolve, reject) => {
//             localVarRequest(localVarRequestOptions, (error, response, body) => {
//                 if (error) {
//                     reject(error);
//                 } else {
//                     body = ObjectSerializer.deserialize(body, 'ActionResult');
//                     if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
//                         resolve({ response, body });
//                     } else {
//                         reject({ response, body });
//                     }
//                 }
//             });
//         });
//     }
//     /**
//      *
//      * @summary Get the list of created action object templates.
//      * @param authorization Access token provided by the user (obtained from a known identity provider).
//      * @param tenant Tenant name/identifier
//      */
//     public getActions (authorization: string, tenant: string, options: {headers: {[name: string]: string}} = { headers: {} }) : Promise<{ response: http.ClientResponse; body: DeprecatedAction[];  }> {
//         const localVarPath = this.basePath + '/{tenant}/action/v1beta1/actions'
//             .replace('{' + 'tenant' + '}', encodeURIComponent(String(tenant)));
//         const localVarQueryParameters: any = {};
//         const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
//         const localVarFormParams: any = {};

//         // verify required parameter 'authorization' is not null or undefined
//         if (authorization === null || authorization === undefined) {
//             throw new Error('Required parameter authorization was null or undefined when calling getActions.');
//         }

//         // verify required parameter 'tenant' is not null or undefined
//         if (tenant === null || tenant === undefined) {
//             throw new Error('Required parameter tenant was null or undefined when calling getActions.');
//         }

//         localVarHeaderParams.Authorization = ObjectSerializer.serialize(authorization, 'string');
//         (Object as any).assign(localVarHeaderParams, options.headers);

//         const localVarUseFormData = false;

//         const localVarRequestOptions: localVarRequest.Options = {
//             method: 'GET',
//             qs: localVarQueryParameters,
//             headers: localVarHeaderParams,
//             uri: localVarPath,
//             useQuerystring: this._useQuerystring,
//             json: true,
//         };

//         this.authentications.default.applyToRequest(localVarRequestOptions);

//         if (Object.keys(localVarFormParams).length) {
//             if (localVarUseFormData) {
//                 (localVarRequestOptions as any).formData = localVarFormParams;
//             } else {
//                 localVarRequestOptions.form = localVarFormParams;
//             }
//         }
//         return new Promise<{ response: http.ClientResponse; body: DeprecatedAction[];  }>((resolve, reject) => {
//             localVarRequest(localVarRequestOptions, (error, response, body) => {
//                 if (error) {
//                     reject(error);
//                 } else {
//                     body = ObjectSerializer.deserialize(body, 'Array<DeprecatedAction>');
//                     if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
//                         resolve({ response, body });
//                     } else {
//                         reject({ response, body });
//                     }
//                 }
//             });
//         });
//     }
//     /**
//      *
//      * @summary Update an action template object.
//      * @param actionName Name of the action to update.
//      * @param authorization Access token provided by the user (obtained from a known identity provider).
//      * @param tenant Tenant name/identifier
//      * @param deprecatedActionMutable The desired updates to the action object.
//      */
//     public updateAction (actionName: string, authorization: string, tenant: string, deprecatedActionMutable: DeprecatedActionMutable, options: {headers: {[name: string]: string}} = { headers: {} }) : Promise<{ response: http.ClientResponse; body: DeprecatedAction;  }> {
//         const localVarPath = this.basePath + '/{tenant}/action/v1beta1/actions/{action_name}'
//             .replace('{' + 'action_name' + '}', encodeURIComponent(String(actionName)))
//             .replace('{' + 'tenant' + '}', encodeURIComponent(String(tenant)));
//         const localVarQueryParameters: any = {};
//         const localVarHeaderParams: any = (Object as any).assign({}, this.defaultHeaders);
//         const localVarFormParams: any = {};

//         // verify required parameter 'actionName' is not null or undefined
//         if (actionName === null || actionName === undefined) {
//             throw new Error('Required parameter actionName was null or undefined when calling updateAction.');
//         }

//         // verify required parameter 'authorization' is not null or undefined
//         if (authorization === null || authorization === undefined) {
//             throw new Error('Required parameter authorization was null or undefined when calling updateAction.');
//         }

//         // verify required parameter 'tenant' is not null or undefined
//         if (tenant === null || tenant === undefined) {
//             throw new Error('Required parameter tenant was null or undefined when calling updateAction.');
//         }

//         // verify required parameter 'deprecatedActionMutable' is not null or undefined
//         if (deprecatedActionMutable === null || deprecatedActionMutable === undefined) {
//             throw new Error('Required parameter deprecatedActionMutable was null or undefined when calling updateAction.');
//         }

//         localVarHeaderParams.Authorization = ObjectSerializer.serialize(authorization, 'string');
//         (Object as any).assign(localVarHeaderParams, options.headers);

//         const localVarUseFormData = false;

//         const localVarRequestOptions: localVarRequest.Options = {
//             method: 'PATCH',
//             qs: localVarQueryParameters,
//             headers: localVarHeaderParams,
//             uri: localVarPath,
//             useQuerystring: this._useQuerystring,
//             json: true,
//             body: ObjectSerializer.serialize(deprecatedActionMutable, 'DeprecatedActionMutable')
//         };

//         this.authentications.default.applyToRequest(localVarRequestOptions);

//         if (Object.keys(localVarFormParams).length) {
//             if (localVarUseFormData) {
//                 (localVarRequestOptions as any).formData = localVarFormParams;
//             } else {
//                 localVarRequestOptions.form = localVarFormParams;
//             }
//         }
//         return new Promise<{ response: http.ClientResponse; body: DeprecatedAction;  }>((resolve, reject) => {
//             localVarRequest(localVarRequestOptions, (error, response, body) => {
//                 if (error) {
//                     reject(error);
//                 } else {
//                     body = ObjectSerializer.deserialize(body, 'DeprecatedAction');
//                     if (response.statusCode && response.statusCode >= 200 && response.statusCode <= 299) {
//                         resolve({ response, body });
//                     } else {
//                         reject({ response, body });
//                     }
//                 }
//             });
//         });
//     }
// }
