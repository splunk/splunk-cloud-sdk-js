/**
 * Action Service
 * A service that receives incoming notifications and uses pre-defined templates (action objects) to turn those notifications into meaningful actions.
 *
 * OpenAPI spec version: v1beta2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
/// <reference types="node" />
import Promise = require('bluebird');
import http = require('http');
import { Action } from '../model/action';
import { ActionMutable } from '../model/actionMutable';
import { ActionResult } from '../model/actionResult';
import { Authentication } from '../model/models';
export declare enum V1beta2ActionManagementApiApiKeys {
}
export declare class V1beta2ActionManagementApi {
    protected _basePath: string;
    protected defaultHeaders: any;
    protected _useQuerystring: boolean;
    protected authentications: {
        default: Authentication;
    };
    constructor(basePath?: string);
    useQuerystring: boolean;
    basePath: string;
    setDefaultAuthentication(auth: Authentication): void;
    setApiKey(key: V1beta2ActionManagementApiApiKeys, value: string): void;
    /**
     *
     * @summary Create an action object template.
     * @param authorization Access token provided by the user (obtained from a known identity provider).
     * @param tenant Tenant name/identifier
     * @param action The action object template to create.
     */
    createAction(authorization: string, tenant: string, action: Action, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Action;
    }>;
    /**
     *
     * @summary Delete an action object template.
     * @param actionName The name of the action object to delete.
     * @param authorization Access token provided by the user (obtained from a known identity provider).
     * @param tenant Tenant name/identifier
     */
    deleteAction(actionName: string, authorization: string, tenant: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body?: any;
    }>;
    /**
     *
     * @summary Return a specific action object.
     * @param actionName The name of the action object to retrieve.
     * @param authorization Access token provided by the user (obtained from a known identity provider).
     * @param tenant Tenant name/identifier
     */
    getAction(actionName: string, authorization: string, tenant: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Action;
    }>;
    /**
     *
     * @summary Get triggered action's execution status.
     * @param actionName Name of the triggered action.
     * @param statusId ID for the action status.
     * @param authorization Access token provided by the user (obtained from a known identity provider).
     * @param tenant Tenant name/identifier
     */
    getActionStatus(actionName: string, statusId: string, authorization: string, tenant: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: ActionResult;
    }>;
    /**
     *
     * @summary Get the list of created action object templates.
     * @param authorization Access token provided by the user (obtained from a known identity provider).
     * @param tenant Tenant name/identifier
     */
    getActions(authorization: string, tenant: string, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Action[];
    }>;
    /**
     *
     * @summary Update an action template object.
     * @param actionName Name of the action to update.
     * @param authorization Access token provided by the user (obtained from a known identity provider).
     * @param tenant Tenant name/identifier
     * @param actionMutable The desired updates to the action object.
     */
    updateAction(actionName: string, authorization: string, tenant: string, actionMutable: ActionMutable, options?: {
        headers: {
            [name: string]: string;
        };
    }): Promise<{
        response: http.IncomingMessage;
        body: Action;
    }>;
}
