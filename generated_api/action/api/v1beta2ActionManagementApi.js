"use strict";
/**
 * Action Service
 * A service that receives incoming notifications and uses pre-defined templates (action objects) to turn those notifications into meaningful actions.
 *
 * OpenAPI spec version: v1beta2
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
var Promise = require("bluebird");
var localVarRequest = require("request");
var models_1 = require("../model/models");
var defaultBasePath = 'https://api.splunkbeta.com';
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var V1beta2ActionManagementApiApiKeys;
(function (V1beta2ActionManagementApiApiKeys) {
})(V1beta2ActionManagementApiApiKeys = exports.V1beta2ActionManagementApiApiKeys || (exports.V1beta2ActionManagementApiApiKeys = {}));
var V1beta2ActionManagementApi = /** @class */ (function () {
    function V1beta2ActionManagementApi(basePathOrUsername, password, basePath) {
        this._basePath = defaultBasePath;
        this.defaultHeaders = {};
        this._useQuerystring = false;
        this.authentications = {
            default: new models_1.VoidAuth(),
        };
        if (password) {
            if (basePath) {
                this.basePath = basePath;
            }
        }
        else {
            if (basePathOrUsername) {
                this.basePath = basePathOrUsername;
            }
        }
    }
    Object.defineProperty(V1beta2ActionManagementApi.prototype, "useQuerystring", {
        set: function (value) {
            this._useQuerystring = value;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(V1beta2ActionManagementApi.prototype, "basePath", {
        get: function () {
            return this._basePath;
        },
        set: function (basePath) {
            this._basePath = basePath;
        },
        enumerable: true,
        configurable: true
    });
    V1beta2ActionManagementApi.prototype.setDefaultAuthentication = function (auth) {
        this.authentications.default = auth;
    };
    V1beta2ActionManagementApi.prototype.setApiKey = function (key, value) {
        this.authentications[V1beta2ActionManagementApiApiKeys[key]].apiKey = value;
    };
    /**
     *
     * @summary Create an action object template.
     * @param authorization Access token provided by the user (obtained from a known identity provider).
     * @param tenant Tenant name/identifier
     * @param action The action object template to create.
     */
    V1beta2ActionManagementApi.prototype.createAction = function (authorization, tenant, action, options) {
        if (options === void 0) { options = { headers: {} }; }
        var localVarPath = this.basePath +
            '/{tenant}/action/v1beta2/actions'.replace('{' + 'tenant' + '}', encodeURIComponent(String(tenant)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling createAction.');
        }
        // verify required parameter 'tenant' is not null or undefined
        if (tenant === null || tenant === undefined) {
            throw new Error('Required parameter tenant was null or undefined when calling createAction.');
        }
        // verify required parameter 'action' is not null or undefined
        if (action === null || action === undefined) {
            throw new Error('Required parameter action was null or undefined when calling createAction.');
        }
        localVarHeaderParams.Authorization = models_1.ObjectSerializer.serialize(authorization, 'string');
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'POST',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(action, 'Action'),
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, 'Action');
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Delete an action object template.
     * @param actionName The name of the action object to delete.
     * @param authorization Access token provided by the user (obtained from a known identity provider).
     * @param tenant Tenant name/identifier
     */
    V1beta2ActionManagementApi.prototype.deleteAction = function (actionName, authorization, tenant, options) {
        if (options === void 0) { options = { headers: {} }; }
        var localVarPath = this.basePath +
            '/{tenant}/action/v1beta2/actions/{action_name}'
                .replace('{' + 'action_name' + '}', encodeURIComponent(String(actionName)))
                .replace('{' + 'tenant' + '}', encodeURIComponent(String(tenant)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'actionName' is not null or undefined
        if (actionName === null || actionName === undefined) {
            throw new Error('Required parameter actionName was null or undefined when calling deleteAction.');
        }
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling deleteAction.');
        }
        // verify required parameter 'tenant' is not null or undefined
        if (tenant === null || tenant === undefined) {
            throw new Error('Required parameter tenant was null or undefined when calling deleteAction.');
        }
        localVarHeaderParams.Authorization = models_1.ObjectSerializer.serialize(authorization, 'string');
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'DELETE',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Return a specific action object.
     * @param actionName The name of the action object to retrieve.
     * @param authorization Access token provided by the user (obtained from a known identity provider).
     * @param tenant Tenant name/identifier
     */
    V1beta2ActionManagementApi.prototype.getAction = function (actionName, authorization, tenant, options) {
        if (options === void 0) { options = { headers: {} }; }
        var localVarPath = this.basePath +
            '/{tenant}/action/v1beta2/actions/{action_name}'
                .replace('{' + 'action_name' + '}', encodeURIComponent(String(actionName)))
                .replace('{' + 'tenant' + '}', encodeURIComponent(String(tenant)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'actionName' is not null or undefined
        if (actionName === null || actionName === undefined) {
            throw new Error('Required parameter actionName was null or undefined when calling getAction.');
        }
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getAction.');
        }
        // verify required parameter 'tenant' is not null or undefined
        if (tenant === null || tenant === undefined) {
            throw new Error('Required parameter tenant was null or undefined when calling getAction.');
        }
        localVarHeaderParams.Authorization = models_1.ObjectSerializer.serialize(authorization, 'string');
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, 'Action');
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get triggered action's execution status.
     * @param actionName Name of the triggered action.
     * @param statusId ID for the action status.
     * @param authorization Access token provided by the user (obtained from a known identity provider).
     * @param tenant Tenant name/identifier
     */
    V1beta2ActionManagementApi.prototype.getActionStatus = function (actionName, statusId, authorization, tenant, options) {
        if (options === void 0) { options = { headers: {} }; }
        var localVarPath = this.basePath +
            '/{tenant}/action/v1beta2/actions/{action_name}/status/{status_id}'
                .replace('{' + 'action_name' + '}', encodeURIComponent(String(actionName)))
                .replace('{' + 'status_id' + '}', encodeURIComponent(String(statusId)))
                .replace('{' + 'tenant' + '}', encodeURIComponent(String(tenant)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'actionName' is not null or undefined
        if (actionName === null || actionName === undefined) {
            throw new Error('Required parameter actionName was null or undefined when calling getActionStatus.');
        }
        // verify required parameter 'statusId' is not null or undefined
        if (statusId === null || statusId === undefined) {
            throw new Error('Required parameter statusId was null or undefined when calling getActionStatus.');
        }
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getActionStatus.');
        }
        // verify required parameter 'tenant' is not null or undefined
        if (tenant === null || tenant === undefined) {
            throw new Error('Required parameter tenant was null or undefined when calling getActionStatus.');
        }
        localVarHeaderParams.Authorization = models_1.ObjectSerializer.serialize(authorization, 'string');
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, 'ActionResult');
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Get the list of created action object templates.
     * @param authorization Access token provided by the user (obtained from a known identity provider).
     * @param tenant Tenant name/identifier
     */
    V1beta2ActionManagementApi.prototype.getActions = function (authorization, tenant, options) {
        if (options === void 0) { options = { headers: {} }; }
        var localVarPath = this.basePath +
            '/{tenant}/action/v1beta2/actions'.replace('{' + 'tenant' + '}', encodeURIComponent(String(tenant)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling getActions.');
        }
        // verify required parameter 'tenant' is not null or undefined
        if (tenant === null || tenant === undefined) {
            throw new Error('Required parameter tenant was null or undefined when calling getActions.');
        }
        localVarHeaderParams.Authorization = models_1.ObjectSerializer.serialize(authorization, 'string');
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'GET',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, 'Array<Action>');
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    /**
     *
     * @summary Update an action template object.
     * @param actionName Name of the action to update.
     * @param authorization Access token provided by the user (obtained from a known identity provider).
     * @param tenant Tenant name/identifier
     * @param actionMutable The desired updates to the action object.
     */
    V1beta2ActionManagementApi.prototype.updateAction = function (actionName, authorization, tenant, actionMutable, options) {
        if (options === void 0) { options = { headers: {} }; }
        var localVarPath = this.basePath +
            '/{tenant}/action/v1beta2/actions/{action_name}'
                .replace('{' + 'action_name' + '}', encodeURIComponent(String(actionName)))
                .replace('{' + 'tenant' + '}', encodeURIComponent(String(tenant)));
        var localVarQueryParameters = {};
        var localVarHeaderParams = Object.assign({}, this.defaultHeaders);
        var localVarFormParams = {};
        // verify required parameter 'actionName' is not null or undefined
        if (actionName === null || actionName === undefined) {
            throw new Error('Required parameter actionName was null or undefined when calling updateAction.');
        }
        // verify required parameter 'authorization' is not null or undefined
        if (authorization === null || authorization === undefined) {
            throw new Error('Required parameter authorization was null or undefined when calling updateAction.');
        }
        // verify required parameter 'tenant' is not null or undefined
        if (tenant === null || tenant === undefined) {
            throw new Error('Required parameter tenant was null or undefined when calling updateAction.');
        }
        // verify required parameter 'actionMutable' is not null or undefined
        if (actionMutable === null || actionMutable === undefined) {
            throw new Error('Required parameter actionMutable was null or undefined when calling updateAction.');
        }
        localVarHeaderParams.Authorization = models_1.ObjectSerializer.serialize(authorization, 'string');
        Object.assign(localVarHeaderParams, options.headers);
        var localVarUseFormData = false;
        var localVarRequestOptions = {
            method: 'PATCH',
            qs: localVarQueryParameters,
            headers: localVarHeaderParams,
            uri: localVarPath,
            useQuerystring: this._useQuerystring,
            json: true,
            body: models_1.ObjectSerializer.serialize(actionMutable, 'ActionMutable'),
        };
        this.authentications.default.applyToRequest(localVarRequestOptions);
        if (Object.keys(localVarFormParams).length) {
            if (localVarUseFormData) {
                localVarRequestOptions.formData = localVarFormParams;
            }
            else {
                localVarRequestOptions.form = localVarFormParams;
            }
        }
        return new Promise(function (resolve, reject) {
            localVarRequest(localVarRequestOptions, function (error, response, body) {
                if (error) {
                    reject(error);
                }
                else {
                    body = models_1.ObjectSerializer.deserialize(body, 'Action');
                    if (response.statusCode &&
                        response.statusCode >= 200 &&
                        response.statusCode <= 299) {
                        resolve({ response: response, body: body });
                    }
                    else {
                        reject({ response: response, body: body });
                    }
                }
            });
        });
    };
    return V1beta2ActionManagementApi;
}());
exports.V1beta2ActionManagementApi = V1beta2ActionManagementApi;
//# sourceMappingURL=v1beta2ActionManagementApi.js.map