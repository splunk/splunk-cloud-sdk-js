// tslint:disable
/**
 * Action Service
 * A service that receives incoming notifications and uses pre-defined templates (action objects) to turn those notifications into meaningful actions.
 *
 * OpenAPI spec version: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Notification,
    NotificationFromJSON,
    NotificationToJSON,
    ServiceError,
    ServiceErrorFromJSON,
    ServiceErrorToJSON,
} from '../models';

export interface TriggerActionRequest {
    tenant: string;
    authorization: string;
    actionName: string;
    notification: Notification;
}

/**
 * no description
 */
export class V1beta2ActionTriggerApi extends runtime.BaseAPI {

    /**
     * Trigger an action from a notification.
     */
    async triggerActionRaw(requestParameters: TriggerActionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling triggerAction.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling triggerAction.');
        }

        if (requestParameters.actionName === null || requestParameters.actionName === undefined) {
            throw new runtime.RequiredError('actionName','Required parameter requestParameters.actionName was null or undefined when calling triggerAction.');
        }

        if (requestParameters.notification === null || requestParameters.notification === undefined) {
            throw new runtime.RequiredError('notification','Required parameter requestParameters.notification was null or undefined when calling triggerAction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/{tenant}/action/v1beta2/actions/{action_name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"action_name"}}`, encodeURIComponent(String(requestParameters.actionName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationToJSON(requestParameters.notification),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Trigger an action from a notification.
     */
    async triggerAction(requestParameters: TriggerActionRequest): Promise<void> {
        await this.triggerActionRaw(requestParameters);
    }

}
