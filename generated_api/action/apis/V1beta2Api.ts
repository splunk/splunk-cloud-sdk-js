// tslint:disable
/**
 * Action Service
 * A service that receives incoming notifications and uses pre-defined templates (action objects) to turn those notifications into meaningful actions.
 *
 * OpenAPI spec version: v1beta2
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    Action,
    ActionFromJSON,
    ActionToJSON,
    ActionMutable,
    ActionMutableFromJSON,
    ActionMutableToJSON,
    ActionResult,
    ActionResultFromJSON,
    ActionResultToJSON,
    Notification,
    NotificationFromJSON,
    NotificationToJSON,
    ServiceError,
    ServiceErrorFromJSON,
    ServiceErrorToJSON,
} from '../models';

export interface CreateActionRequest {
    tenant: string;
    authorization: string;
    action: Action;
}

export interface DeleteActionRequest {
    tenant: string;
    authorization: string;
    actionName: string;
}

export interface GetActionRequest {
    tenant: string;
    authorization: string;
    actionName: string;
}

export interface GetActionStatusRequest {
    tenant: string;
    authorization: string;
    actionName: string;
    statusId: string;
}

export interface GetActionsRequest {
    tenant: string;
    authorization: string;
}

export interface TriggerActionRequest {
    tenant: string;
    authorization: string;
    actionName: string;
    notification: Notification;
}

export interface UpdateActionRequest {
    tenant: string;
    authorization: string;
    actionName: string;
    actionMutable: ActionMutable;
}

/**
 * no description
 */
export class V1beta2Api extends runtime.BaseAPI {

    /**
     * Create an action object template.
     */
    async createActionRaw(requestParameters: CreateActionRequest): Promise<runtime.ApiResponse<Action>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling createAction.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling createAction.');
        }

        if (requestParameters.action === null || requestParameters.action === undefined) {
            throw new runtime.RequiredError('action','Required parameter requestParameters.action was null or undefined when calling createAction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/{tenant}/action/v1beta2/actions`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ActionToJSON(requestParameters.action),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ActionFromJSON(jsonValue));
    }

    /**
     * Create an action object template.
     */
    async createAction(requestParameters: CreateActionRequest): Promise<Action> {
        const response = await this.createActionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Delete an action object template.
     */
    async deleteActionRaw(requestParameters: DeleteActionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling deleteAction.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling deleteAction.');
        }

        if (requestParameters.actionName === null || requestParameters.actionName === undefined) {
            throw new runtime.RequiredError('actionName','Required parameter requestParameters.actionName was null or undefined when calling deleteAction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/{tenant}/action/v1beta2/actions/{action_name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"action_name"}}`, encodeURIComponent(String(requestParameters.actionName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an action object template.
     */
    async deleteAction(requestParameters: DeleteActionRequest): Promise<void> {
        await this.deleteActionRaw(requestParameters);
    }

    /**
     * Return a specific action object.
     */
    async getActionRaw(requestParameters: GetActionRequest): Promise<runtime.ApiResponse<Action>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getAction.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getAction.');
        }

        if (requestParameters.actionName === null || requestParameters.actionName === undefined) {
            throw new runtime.RequiredError('actionName','Required parameter requestParameters.actionName was null or undefined when calling getAction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/{tenant}/action/v1beta2/actions/{action_name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"action_name"}}`, encodeURIComponent(String(requestParameters.actionName))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ActionFromJSON(jsonValue));
    }

    /**
     * Return a specific action object.
     */
    async getAction(requestParameters: GetActionRequest): Promise<Action> {
        const response = await this.getActionRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get triggered action's execution status.
     */
    async getActionStatusRaw(requestParameters: GetActionStatusRequest): Promise<runtime.ApiResponse<ActionResult>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getActionStatus.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getActionStatus.');
        }

        if (requestParameters.actionName === null || requestParameters.actionName === undefined) {
            throw new runtime.RequiredError('actionName','Required parameter requestParameters.actionName was null or undefined when calling getActionStatus.');
        }

        if (requestParameters.statusId === null || requestParameters.statusId === undefined) {
            throw new runtime.RequiredError('statusId','Required parameter requestParameters.statusId was null or undefined when calling getActionStatus.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/{tenant}/action/v1beta2/actions/{action_name}/status/{status_id}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"action_name"}}`, encodeURIComponent(String(requestParameters.actionName))).replace(`{${"status_id"}}`, encodeURIComponent(String(requestParameters.statusId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ActionResultFromJSON(jsonValue));
    }

    /**
     * Get triggered action's execution status.
     */
    async getActionStatus(requestParameters: GetActionStatusRequest): Promise<ActionResult> {
        const response = await this.getActionStatusRaw(requestParameters);
        return await response.value();
    }

    /**
     * Get the list of created action object templates.
     */
    async getActionsRaw(requestParameters: GetActionsRequest): Promise<runtime.ApiResponse<Array<Action>>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling getActions.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling getActions.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/{tenant}/action/v1beta2/actions`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(ActionFromJSON));
    }

    /**
     * Get the list of created action object templates.
     */
    async getActions(requestParameters: GetActionsRequest): Promise<Array<Action>> {
        const response = await this.getActionsRaw(requestParameters);
        return await response.value();
    }

    /**
     * Trigger an action from a notification.
     */
    async triggerActionRaw(requestParameters: TriggerActionRequest): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling triggerAction.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling triggerAction.');
        }

        if (requestParameters.actionName === null || requestParameters.actionName === undefined) {
            throw new runtime.RequiredError('actionName','Required parameter requestParameters.actionName was null or undefined when calling triggerAction.');
        }

        if (requestParameters.notification === null || requestParameters.notification === undefined) {
            throw new runtime.RequiredError('notification','Required parameter requestParameters.notification was null or undefined when calling triggerAction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/{tenant}/action/v1beta2/actions/{action_name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"action_name"}}`, encodeURIComponent(String(requestParameters.actionName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationToJSON(requestParameters.notification),
        });

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Trigger an action from a notification.
     */
    async triggerAction(requestParameters: TriggerActionRequest): Promise<void> {
        await this.triggerActionRaw(requestParameters);
    }

    /**
     * Update an action template object.
     */
    async updateActionRaw(requestParameters: UpdateActionRequest): Promise<runtime.ApiResponse<Action>> {
        if (requestParameters.tenant === null || requestParameters.tenant === undefined) {
            throw new runtime.RequiredError('tenant','Required parameter requestParameters.tenant was null or undefined when calling updateAction.');
        }

        if (requestParameters.authorization === null || requestParameters.authorization === undefined) {
            throw new runtime.RequiredError('authorization','Required parameter requestParameters.authorization was null or undefined when calling updateAction.');
        }

        if (requestParameters.actionName === null || requestParameters.actionName === undefined) {
            throw new runtime.RequiredError('actionName','Required parameter requestParameters.actionName was null or undefined when calling updateAction.');
        }

        if (requestParameters.actionMutable === null || requestParameters.actionMutable === undefined) {
            throw new runtime.RequiredError('actionMutable','Required parameter requestParameters.actionMutable was null or undefined when calling updateAction.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.authorization !== undefined && requestParameters.authorization !== null) {
            headerParameters['Authorization'] = String(requestParameters.authorization);
        }

        const response = await this.request({
            path: `/{tenant}/action/v1beta2/actions/{action_name}`.replace(`{${"tenant"}}`, encodeURIComponent(String(requestParameters.tenant))).replace(`{${"action_name"}}`, encodeURIComponent(String(requestParameters.actionName))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: ActionMutableToJSON(requestParameters.actionMutable),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => ActionFromJSON(jsonValue));
    }

    /**
     * Update an action template object.
     */
    async updateAction(requestParameters: UpdateActionRequest): Promise<Action> {
        const response = await this.updateActionRaw(requestParameters);
        return await response.value();
    }

}
